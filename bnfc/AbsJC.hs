

module AbsJC where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
data Program = Pro [Exp]
  deriving (Eq, Ord, Show, Read)

data Exp
    = EBlock [Exp]
    | EIfStmt Exp Exp
    | EIfElse Exp Exp Exp
    | EWhile Exp Exp
    | EForLoo [Exp] Exp
    | EDecEmp Ident
    | EDecVar Ident Exp
    | EDecAno [Ident] Exp
    | EDecFun Ident [Ident] Exp
    | EFun Exp [Exp]
    | EFunExp [Exp]
    | EReturn Exp
    | EToStr Exp
    | EToInt Exp
    | EPrint Exp
    | EAss Exp AssOp Exp
    | EElem Ident Exp
    | EPre SSym Exp
    | EPreOp UnaOp Exp
    | EPost Exp SSym
    | ELor Exp Exp
    | EAnd Exp Exp
    | EEqu Exp Exp
    | ENeq Exp Exp
    | ELrt Exp Exp
    | EGrt Exp Exp
    | EAdd Exp Exp
    | ESub Exp Exp
    | EMul Exp Exp
    | EDiv Exp Exp
    | ENil
    | EBool Boolean
    | EInt Integer
    | EStr String
    | EVar Ident
    | EArr [Exp]
  deriving (Eq, Ord, Show, Read)

data SSym = SInc | SDec
  deriving (Eq, Ord, Show, Read)

data Boolean = BTrue | BFalse
  deriving (Eq, Ord, Show, Read)

data AssOp = ASgn | AMul | ADiv | AAdd | ASub
  deriving (Eq, Ord, Show, Read)

data UnaOp = Poz | Neg | LNe
  deriving (Eq, Ord, Show, Read)

