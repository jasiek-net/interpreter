-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParJC where
import AbsJC
import LexJC
import ErrM

}

%name pProgram Program
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '!' { PT _ (TS _ 1) }
  '!=' { PT _ (TS _ 2) }
  '&&' { PT _ (TS _ 3) }
  '(' { PT _ (TS _ 4) }
  ')' { PT _ (TS _ 5) }
  '*' { PT _ (TS _ 6) }
  '*=' { PT _ (TS _ 7) }
  '+' { PT _ (TS _ 8) }
  '++' { PT _ (TS _ 9) }
  '+=' { PT _ (TS _ 10) }
  ',' { PT _ (TS _ 11) }
  '-' { PT _ (TS _ 12) }
  '--' { PT _ (TS _ 13) }
  '-=' { PT _ (TS _ 14) }
  '/' { PT _ (TS _ 15) }
  '/=' { PT _ (TS _ 16) }
  ';' { PT _ (TS _ 17) }
  '<' { PT _ (TS _ 18) }
  '=' { PT _ (TS _ 19) }
  '==' { PT _ (TS _ 20) }
  '>' { PT _ (TS _ 21) }
  '[' { PT _ (TS _ 22) }
  ']' { PT _ (TS _ 23) }
  'else' { PT _ (TS _ 24) }
  'false' { PT _ (TS _ 25) }
  'for' { PT _ (TS _ 26) }
  'fun' { PT _ (TS _ 27) }
  'if' { PT _ (TS _ 28) }
  'int' { PT _ (TS _ 29) }
  'nil' { PT _ (TS _ 30) }
  'print' { PT _ (TS _ 31) }
  'return' { PT _ (TS _ 32) }
  'str' { PT _ (TS _ 33) }
  'true' { PT _ (TS _ 34) }
  'var' { PT _ (TS _ 35) }
  'while' { PT _ (TS _ 36) }
  '{' { PT _ (TS _ 37) }
  '||' { PT _ (TS _ 38) }
  '}' { PT _ (TS _ 39) }

L_ident  { PT _ (TV $$) }
L_integ  { PT _ (TI $$) }
L_quoted { PT _ (TL $$) }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }
Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
String  :: { String }  : L_quoted {  $1 }

Program :: { Program }
Program : ListExp { AbsJC.Pro $1 }
ListExp :: { [Exp] }
ListExp : {- empty -} { [] }
        | Exp ListExp { (:) $1 $2 }
        | {- empty -} { [] }
        | Exp { (:[]) $1 }
        | Exp ';' ListExp { (:) $1 $3 }
ListIdent :: { [Ident] }
ListIdent : {- empty -} { [] }
          | Ident { (:[]) $1 }
          | Ident ',' ListIdent { (:) $1 $3 }
Exp :: { Exp }
Exp : '{' ListExp '}' { AbsJC.EBlock $2 }
    | 'if' '(' Exp ')' Exp { AbsJC.EIfStmt $3 $5 }
    | 'if' '(' Exp ')' Exp 'else' Exp { AbsJC.EIfElse $3 $5 $7 }
    | 'while' '(' Exp ')' Exp { AbsJC.EWhile $3 $5 }
    | 'for' '(' ListExp ')' Exp { AbsJC.EForLoo $3 $5 }
    | 'var' Ident { AbsJC.EDecEmp $2 }
    | 'var' Ident '=' Exp { AbsJC.EDecVar $2 $4 }
    | 'fun' '(' ListIdent ')' Exp12 { AbsJC.EDecAno $3 $5 }
    | 'fun' Ident '(' ListIdent ')' Exp12 { AbsJC.EDecFun $2 $4 $6 }
    | 'print' '(' Exp ')' ';' { AbsJC.EPrint $3 }
    | Exp9 AssOp Exp { AbsJC.EAss $1 $2 $3 }
    | '[' ListExp ']' { AbsJC.EArr $2 }
    | Exp1 { $1 }
Exp10 :: { Exp }
Exp10 : Exp10 '(' ListExp ')' { AbsJC.EFun $1 $3 }
      | 'return' Exp { AbsJC.EReturn $2 }
      | 'str' '(' Exp ')' { AbsJC.EToStr $3 }
      | 'int' '(' Exp ')' { AbsJC.EToInt $3 }
      | Ident '[' Exp ']' { AbsJC.EElem $1 $3 }
      | Exp10 SSym { AbsJC.EPost $1 $2 }
      | Exp11 { $1 }
Exp12 :: { Exp }
Exp12 : '{' ListExp '}' { AbsJC.EFunExp $2 }
Exp9 :: { Exp }
Exp9 : SSym Exp9 { AbsJC.EPre $1 $2 }
     | UnaOp Exp8 { AbsJC.EPreOp $1 $2 }
     | Exp10 { $1 }
Exp1 :: { Exp }
Exp1 : Exp1 '||' Exp2 { AbsJC.ELor $1 $3 } | Exp2 { $1 }
Exp2 :: { Exp }
Exp2 : Exp2 '&&' Exp3 { AbsJC.EAnd $1 $3 } | Exp3 { $1 }
Exp3 :: { Exp }
Exp3 : Exp3 '==' Exp4 { AbsJC.EEqu $1 $3 }
     | Exp3 '!=' Exp4 { AbsJC.ENeq $1 $3 }
     | Exp4 { $1 }
Exp4 :: { Exp }
Exp4 : Exp4 '<' Exp5 { AbsJC.ELrt $1 $3 }
     | Exp4 '>' Exp5 { AbsJC.EGrt $1 $3 }
     | Exp5 { $1 }
Exp6 :: { Exp }
Exp6 : Exp6 '+' Exp7 { AbsJC.EAdd $1 $3 }
     | Exp6 '-' Exp7 { AbsJC.ESub $1 $3 }
     | Exp7 { $1 }
Exp7 :: { Exp }
Exp7 : Exp7 '*' Exp8 { AbsJC.EMul $1 $3 }
     | Exp7 '/' Exp8 { AbsJC.EDiv $1 $3 }
     | Exp8 { $1 }
Exp11 :: { Exp }
Exp11 : 'nil' { AbsJC.ENil }
      | Boolean { AbsJC.EBool $1 }
      | Integer { AbsJC.EInt $1 }
      | String { AbsJC.EStr $1 }
      | Ident { AbsJC.EVar $1 }
      | '(' Exp ')' { $2 }
Exp5 :: { Exp }
Exp5 : Exp6 { $1 }
Exp8 :: { Exp }
Exp8 : Exp9 { $1 }
SSym :: { SSym }
SSym : '++' { AbsJC.SInc } | '--' { AbsJC.SDec }
Boolean :: { Boolean }
Boolean : 'true' { AbsJC.BTrue } | 'false' { AbsJC.BFalse }
AssOp :: { AssOp }
AssOp : '=' { AbsJC.ASgn }
      | '*=' { AbsJC.AMul }
      | '/=' { AbsJC.ADiv }
      | '+=' { AbsJC.AAdd }
      | '-=' { AbsJC.ASub }
UnaOp :: { UnaOp }
UnaOp : '+' { AbsJC.Poz } | '-' { AbsJC.Neg } | '!' { AbsJC.LNe }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    t:_ -> " before `" ++ id(prToken t) ++ "'"

myLexer = tokens
}

